from django.db import models # type: ignore
from ProductServices.models import Products
from UserServices.models import Users

class Warehouse(models.Model):
    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=255, blank=True, null=True)
    location = models.CharField(max_length=255, blank=True, null=True)
    size = models.CharField(max_length=255, blank=True, null=True, choices=[('small', 'Small'), ('medium', 'Medium'), ('large', 'Large')])
    capacity = models.CharField(max_length=255, blank=True, null=True, choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')])
    warehouse_type = models.CharField(max_length=255, blank=True, null=True, choices=[('OWNED', 'Owned'), ('RENTED', 'Rented'), ('SHARED', 'Shared')])
    additional_information = models.JSONField(blank=True, null=True)
    domain_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='domain_user_id_warehouse')
    added_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='added_by_user_id_warehouse')
    warehouse_manager_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='warehouse_manager_id')
    phone = models.CharField(max_length=15, blank=True, null=True)
    email = models.EmailField(blank=True, null=True)    
    status = models.CharField(max_length=50, choices=[('ACTIVE', 'ACTIVE'), ('INACTIVE', 'INACTIVE')], default='ACTIVE')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

class RackAndShlevesAndFloor(models.Model):
    id = models.AutoField(primary_key=True)
    warehouse_id = models.ForeignKey(Warehouse, on_delete=models.CASCADE, blank=True, null=True, related_name='warehouse_rack_and_shelves')
    name = models.CharField(max_length=255, blank=True, null=True)
    rack = models.CharField(max_length=255, blank=True, null=True)
    shelf = models.CharField(max_length=255, blank=True, null=True)
    floor = models.CharField(max_length=255, blank=True, null=True)
    additional_information = models.JSONField(blank=True, null=True)
    status = models.CharField(max_length=50, choices=[('ACTIVE', 'ACTIVE'), ('INACTIVE', 'INACTIVE')], default='ACTIVE')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

class Inventory(models.Model):
    id = models.AutoField(primary_key=True)
    product_id = models.ForeignKey(Products, on_delete=models.CASCADE, blank=True, null=True, related_name='product_inventory')
    purchase_order_id = models.ForeignKey('OrderServices.PurchaseOrder', on_delete=models.CASCADE, blank=True, null=True, related_name='purchase_order_inventory')    
    purchase_order_item_id = models.ForeignKey('OrderServices.PurchaseOrderItem', on_delete=models.CASCADE, blank=True, null=True, related_name='purchase_order_item_inventory')
    purchase_order_item_inwarded_item_id = models.ForeignKey('OrderServices.PurchaseOrderInwardedLog', on_delete=models.CASCADE, blank=True, null=True, related_name='purchase_order_item_inwarded_item_inventory')
    warehouse_id = models.ForeignKey(Warehouse, on_delete=models.CASCADE, blank=True, null=True, related_name='warehouse_inventory')
    rack_and_shelves_and_floor_id = models.ForeignKey(RackAndShlevesAndFloor, on_delete=models.CASCADE, blank=True, null=True, related_name='rack_and_shelves_and_floor_inventory')
    mrp = models.CharField(max_length=255, blank=True, null=True)
    batch_number = models.CharField(max_length=255, blank=True, null=True)
    discount_type = models.CharField(max_length=50, choices=[('PERCENTAGE', 'Percentage'), ('AMOUNT', 'Amount')], default='PERCENTAGE')
    discount_amount = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    sr_no = models.CharField(max_length=255, blank=True, null=True)
    mfg_date = models.DateField(blank=True, null=True)
    uom = models.CharField(max_length=50, blank=True, null=True, choices=[('PCS', 'Pieces'), ('KG', 'Kilograms'), ('LBS', 'Pounds'), ('LTR', 'Liters'), ('MTR', 'Meters')])
    name = models.CharField(max_length=255, blank=True, null=True)
    ptr = models.CharField(max_length=255, blank=True, null=True)
    received_date = models.DateField(blank=True, null=True)
    expiry_date = models.DateField(blank=True, null=True)
    quantity_inwarded = models.PositiveIntegerField(default=0)
    buying_price = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    selling_price = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    tax_percentage = models.DecimalField(max_digits=5, decimal_places=2, default=0.00)
    tax_amount = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    tax_type = models.CharField(max_length=50, choices=[('GST', 'GST'), ('VAT', 'VAT'), ('CST', 'CST'), ('SERVICE_TAX', 'Service Tax')], default='GST')
    stock_status = models.CharField(max_length=50, choices=[('IN_STOCK', 'In Stock'), ('OUT_OF_STOCK', 'Out of Stock'), ('LOW_STOCK', 'Low Stock'),('DAMAGED','Damaged'),('LOST','Lost')], default='IN_STOCK')
    description = models.TextField(blank=True, null=True)
    quantity = models.PositiveIntegerField(default=0)
    domain_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='domain_user_inventory')
    added_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='added_by_user_inventory')
    total_value = models.DecimalField(max_digits=15, decimal_places=2, default=0.00)
    inward_type = models.CharField(max_length=50, choices=[('PURCHASE', 'Purchase'), ('WAREHOUSE TRANSFER', 'Warehouse Transfer'), ('RETURN', 'Return'),('REPLACEMENT','Replacement')], default='PURCHASE')
    additional_information = models.JSONField(blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)    

class InventoryLog(models.Model):
    id = models.AutoField(primary_key=True)
    po_id = models.ForeignKey('OrderServices.PurchaseOrder', on_delete=models.CASCADE, blank=True, null=True, related_name='po_inventory_log')
    so_id = models.ForeignKey('OrderServices.SalesOrder', on_delete=models.CASCADE, blank=True, null=True, related_name='so_inventory_log')
    inventory_id = models.ForeignKey(Inventory, on_delete=models.CASCADE, blank=True, null=True, related_name='inventory_log')
    warehouse_id = models.ForeignKey(Warehouse, on_delete=models.CASCADE, blank=True, null=True, related_name='warehouse_inventory_log')
    rack_shelf_floor_id = models.ForeignKey(RackAndShlevesAndFloor, on_delete=models.CASCADE, blank=True, null=True, related_name='rack_shelf_floor_inventory_log')
    quantity = models.PositiveIntegerField(default=0)
    domain_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='domain_user_inventory_log')
    added_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='added_by_user_inventory_log')
    status = models.CharField(max_length=50, choices=[('INWARD', 'INWARD'), ('OUTWARD', 'OUTWARD'),('DAMAGED', 'DAMAGED'),('LOST','LOST'),('EXPIRED','EXPIRED'),('RETURNED','RETURNED'),('ADJUSTMENT','ADJUSTMENT'),('WAREHOUSE TRANSFER','WAREHOUSE TRANSFER')], default='ACTIVE')
    additional_information = models.JSONField(blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)